<strong>Incrementor</strong><br />
Current value: <strong id="current-value" aria-live="polite">???</strong><br/>
<br/>
<button data-increment aria-controls="current-value">Increment</button>

<script>
    import { Contract, Networks, scValToNative } from "@stellar/stellar-sdk";
    import pkg from '@stellar/freighter-api';
    const { isConnected, setAllowed, getAddress, getNetworkDetails, signTransaction } = pkg;
    import { CallSignContract } from "../../utils/contract_caller";
    import { getServer } from "../../utils/state";

    const button = document.querySelector("[data-increment]") as HTMLInputElement;
    const currentValue = document.querySelector("#current-value") as HTMLElement;

    button.addEventListener("click", async () => {
        // handle connecting to user wallet
        alert("Getting address from Freighter!")
        const addressObj = await getAddress();
        let publicKey: string;
        
        publicKey = addressObj.address;

        if (!publicKey || addressObj.error) {
            alert("Problem retrieving address from Freighter.");
            return;
        }

        button.disabled = true;
        button.classList.add("loading");
        currentValue.innerHTML = currentValue.innerHTML + '<span class="visually-hidden"> – updating…</span>';

        // get details to build contract invocation
        const server = getServer();
        const networkPass = Networks.TESTNET;
        const incContract = new Contract(import.meta.env.PUBLIC_INCREMENT_CONTRACT_ID);
        const account = await server!.getAccount(publicKey);
        alert("Server: " + server!.serverURL + "PubKey: " + publicKey);
        
        const incResponse = await CallSignContract(
            account,
            networkPass,
            server!,
            incContract,
            "increment"
        )

        // handle response
        if (incResponse == null) {
            currentValue.innerHTML = "Error calling increment.";
        } else {
            currentValue.innerHTML = scValToNative(incResponse).tostring();
        }

        button.disabled = false;
        button.classList.remove("loading");
    });
</script>